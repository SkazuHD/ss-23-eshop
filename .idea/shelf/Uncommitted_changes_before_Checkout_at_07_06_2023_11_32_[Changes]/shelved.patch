Index: src/main/java/org/eshop/shop/Shop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.eshop.shop;\r\n\r\nimport org.eshop.entities.*;\r\nimport org.eshop.exceptions.LoginFailed;\r\nimport org.eshop.exceptions.NotInStockException;\r\nimport org.eshop.exceptions.ProductNotFound;\r\nimport org.eshop.exceptions.UserExistsException;\r\nimport org.eshop.persistence.FileManager;\r\nimport org.eshop.persistence.ShopPersistence;\r\n\r\nimport java.io.File;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * The type Shop.\r\n */\r\npublic class Shop {\r\n\r\n    /**\r\n     * The Customer manager.\r\n     */\r\n    CustomerManager customerManager = new CustomerManager();\r\n    /**\r\n     * The Product manager.\r\n     */\r\n    ProductManager productManager = new ProductManager();\r\n    /**\r\n     * The Employee manager.\r\n     */\r\n    EmployeeManager employeeManager = new EmployeeManager();\r\n\r\n    /**\r\n     * The Event manager.\r\n     */\r\n    EventManager eventManager = new EventManager();\r\n    /**\r\n     * The Persistence.\r\n     */\r\n    ShopPersistence persistence = new FileManager();\r\n\r\n\r\n    /**\r\n     * Instantiates a new Shop.\r\n     * and loads the data from the csv files\r\n     */\r\n    public Shop() {\r\n        load();\r\n    }\r\n\r\n    /**\r\n     * Save async.\r\n     * Saves products to csv file Async\r\n     */\r\n    public void saveAsync() {\r\n        // Parallel Process\r\n        new Thread(() -> {\r\n\r\n            //Test if file is in use\r\n            File file = new File(\"products.csv\");\r\n            while (!file.renameTo(file)) {\r\n                try {\r\n                    Thread.sleep(100);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            try {\r\n                persistence.openForWriting(\"products.csv\", false);\r\n                Collection<Products> products = productManager.getProducts();\r\n                for (Products p : products) {\r\n                    persistence.writeProducts(p);\r\n                }\r\n                persistence.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    /**\r\n     * Load.\r\n     * Loads the data from the csv files using the persistence Module\r\n     */\r\n    public void load() {\r\n        try {\r\n\r\n            persistence.openForReading(\"customers.csv\");\r\n            Customer c;\r\n            do {\r\n                c = persistence.readCustomer();\r\n                if (c != null) {\r\n                    customerManager.loadCustomer(c);\r\n                }\r\n            } while (c != null);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            persistence.close();\r\n        }\r\n        try {\r\n            persistence.openForReading(\"employees.csv\");\r\n            Employee e;\r\n            do {\r\n                e = persistence.readEmployee();\r\n                if (e != null) {\r\n                    employeeManager.register(e.getUsername(), Integer.parseInt(e.getID()), e.getName(), e.getPassword());\r\n                }\r\n            } while (e != null);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            persistence.close();\r\n        }\r\n        try {\r\n            persistence.openForReading(\"products.csv\");\r\n            Products p;\r\n            do {\r\n                p = persistence.readProducts();\r\n                if (p != null) {\r\n                    productManager.loadProduct(p);\r\n                }\r\n            } while (p != null);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            persistence.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register user.\r\n     *\r\n     * @param username the username\r\n     * @param password the password\r\n     * @param name     the name\r\n     * @param address  the address\r\n     * @throws UserExistsException the customer exists exception\r\n     */\r\n    public void registerUser(String username, String password, String name, String address) throws UserExistsException {\r\n        if (!customerManager.register(username, password, name, address)) {\r\n            throw new UserExistsException(username);\r\n        }\r\n        //Try Saveing to File\r\n        try {\r\n            persistence.openForWriting(\"customers.csv\", true);\r\n            Customer c = customerManager.getCustomer(username);\r\n            persistence.writeCustomer(c);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            persistence.close();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Login user customer.\r\n     *\r\n     * @param username the username\r\n     * @param password the password\r\n     * @return the customer\r\n     * @throws LoginFailed the customer login failed\r\n     */\r\n    public User loginUser(String username, String password) throws LoginFailed {\r\n        try {\r\n            return customerManager.login(username, password);\r\n        } catch (LoginFailed e) {\r\n            return employeeManager.login(username, password);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Log out user boolean.\r\n     *\r\n     * @param u the u\r\n     * @return the boolean\r\n     */\r\n    public boolean logOutUser(User u) {\r\n        u.logout();\r\n        return u.isLoggedIn();\r\n    }\r\n\r\n    /**\r\n     * Gets product set.\r\n     *\r\n     * @return the product set\r\n     */\r\n//Products\r\n    public Collection<Products> getProductSet() {\r\n        return productManager.getProducts();\r\n    }\r\n\r\n    /**\r\n     * Add product to cart.\r\n     *\r\n     * @param id       the id of the product\r\n     * @param quantity the quantity\r\n     * @param c        the Customer\r\n     * @throws NotInStockException Exception thrown when the product is not in stock\r\n     * @throws ProductNotFound     Exception thrown when the product is not found\r\n     */\r\n//CUSTOMER ONLY\r\n    public void addProductToCart(int id, int quantity, Customer c) throws NotInStockException, ProductNotFound {\r\n        Products p = productManager.getProductById(id);\r\n        if (p != null) {\r\n            customerManager.buyProduct(p, quantity, c);\r\n        } else {\r\n            throw new ProductNotFound(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove product from cart.\r\n     *\r\n     * @param id       the name\r\n     * @param quantity the quantity\r\n     * @param c        the c\r\n     * @throws ProductNotFound the product not found\r\n     */\r\n    public void removeProductFromCart(int id, int quantity, Customer c) throws ProductNotFound {\r\n        Products p = productManager.getProductById(id);\r\n        if (p != null) {\r\n            customerManager.removeProduct(p, quantity, c);\r\n        } else {\r\n            throw new ProductNotFound(id);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * }\r\n     * Gets cart.\r\n     *\r\n     * @param c the Customer\r\n     * @return the cart\r\n     */\r\n    public Map<Products, Integer> getCart(Customer c) {\r\n        return customerManager.getCart(c);\r\n    }\r\n\r\n    /**\r\n     * Checkout.\r\n     *\r\n     * @param c the Customer\r\n     */\r\n//TODO Check if the product is in stock before checking out\r\n    public void checkout(Customer c) {\r\n        Map<Products, Integer> cart = c.getCart();\r\n        for (Products key : cart.keySet()) {\r\n            try {\r\n                eventManager.addEvent(c, key, -cart.get(key));\r\n                productManager.removeProduct(key.getId(), cart.get(key));\r\n            } catch (ProductNotFound e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        }\r\n        saveAsync();\r\n        cart.clear();\r\n    }\r\n\r\n    /**\r\n     * Gets invoice.\r\n     *\r\n     * @param c the c\r\n     * @return the invoice\r\n     */\r\n    public String getInvoice(Customer c) {\r\n        Invoice i = customerManager.checkout(c);\r\n        return i.toString();\r\n    }\r\n    //EMPLOYEE ONLY\r\n\r\n    /**\r\n     * Increase quantity.\r\n     *\r\n     * @param id       the id\r\n     * @param quantity the quantity\r\n     * @param u        the u\r\n     * @throws ProductNotFound the product not found\r\n     */\r\n    public void increaseQuantity(int id, int quantity, User u) throws ProductNotFound {\r\n        productManager.increaseQuantity(id, quantity);\r\n        saveAsync();\r\n        eventManager.addEvent(u, productManager.getProductById(id), quantity);\r\n    }\r\n\r\n    /**\r\n     * Create product.\r\n     *\r\n     * @param name     the name\r\n     * @param price    the price\r\n     * @param quantity the quantity\r\n     * @param u        the u\r\n     */\r\n    public void createProduct(String name, double price, int quantity, User u) {\r\n        Products p = productManager.createProduct(name, price, quantity);\r\n        saveAsync();\r\n        eventManager.addEvent(u, p, quantity);\r\n\r\n    }\r\n\r\n    /**\r\n     * Find products list.\r\n     *\r\n     * @param name the name\r\n     * @return the list\r\n     */\r\n    public List<Products> findProducts(String name) {\r\n        return productManager.getProductByName(name);\r\n    }\r\n\r\n    /**\r\n     * Find product products.\r\n     *\r\n     * @param id the id\r\n     * @return the products\r\n     * @throws ProductNotFound the product not found\r\n     */\r\n    public Products findProduct(int id) throws ProductNotFound {\r\n        return productManager.getProductById(id);\r\n    }\r\n\r\n    /**\r\n     * Remove product.\r\n     *\r\n     * @param id       the name\r\n     * @param quantity the quantity\r\n     * @param user     the user\r\n     * @throws ProductNotFound the product not found\r\n     */\r\n    public void removeProduct(int id, int quantity, User user) throws ProductNotFound {\r\n        productManager.removeProduct(id, quantity);\r\n        saveAsync();\r\n\r\n        eventManager.addEvent(user, productManager.getProductById(id), -quantity);\r\n    }\r\n\r\n    /**\r\n     * Register employee.\r\n     *\r\n     * @param username the username\r\n     * @param id       the Personalnummmer\r\n     * @param name     the name\r\n     * @param password the password\r\n     * @throws UserExistsException the customer exists exception\r\n     */\r\n//Employees\r\n    public void registerEmployee(String username, int id, String name, String password) throws UserExistsException {\r\n        if (!employeeManager.register(username, id, name, password)) {\r\n            throw new UserExistsException(username);\r\n        }\r\n        //Try Saving to File\r\n        try {\r\n            persistence.openForWriting(\"employees.csv\", true);\r\n            Employee e = employeeManager.getEmployee(username);\r\n            persistence.writeEmployee(e);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            persistence.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets product.\r\n     *\r\n     * @param name the name\r\n     * @return the product\r\n     */\r\n    public List<Products> getProduct(String name) {\r\n        //TODO MAYBE JUST RETURN THE FIRST ONE\r\n        return productManager.getProductByName(name);\r\n    }\r\n}\r\n//Employees\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/eshop/shop/Shop.java b/src/main/java/org/eshop/shop/Shop.java
--- a/src/main/java/org/eshop/shop/Shop.java	(revision 737b13b5bae2cd21ad318f35ffdf6dd3b1424cbc)
+++ b/src/main/java/org/eshop/shop/Shop.java	(date 1686130345544)
@@ -208,6 +208,7 @@
 //CUSTOMER ONLY
     public void addProductToCart(int id, int quantity, Customer c) throws NotInStockException, ProductNotFound {
         Products p = productManager.getProductById(id);
+        if(p == mass)
         if (p != null) {
             customerManager.buyProduct(p, quantity, c);
         } else {
